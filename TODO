# ASM & ASM interpreter TODO file. Use Emacs org-mode to browse!
#
# ? - think/rethink/reimplement
# ! - important
#
#+SEQ_TODO: THINK TODO TEST DONE FIXME

* TODO THINGS CONCERNING THIS FILE [SIC]:
- ! Restructure "THINNGS TO IMPLEMENT IN THE LANGUAGE" to map neatly to
  the modules needed in the language.
- List ASMKit functions here.
* TODO THINGS TO IMPLEMENT IN THE LANGUAGE:
** TEST Lexical:
*** TEST Comments:
- [X] Line comments starting with "##" or "# ". E.g. # line comment\n
- [X] Expression comments - analyzed syntacticly, used for debugging and
      documenting purposes. E.g. #(sexp comment), #sexp_comment
** TODO Language quirks:
*** TEST Booleans:
- [X] Only one logical false, anything else is considered true -
      () = fnord = '() = 'fnord
*** TEST Quoting & embedding:
- [X] Quote - returns the argument untouched. Extended syntax - '.
- [X] Quasiquote - returns the argument with embedded
      expressions. Extended syntax - `.
- [X] Embed - embeds an expression in quasiquote and strings,
      evaluates strings, binds variables in pattern matching.
      Extended syntax - $.
*** THINK Pattern matching:
- [ ] (matches? pattern arg)
- [ ] Binds embedded/backtracked symbols from pattern to the actual objects,
      returns a Scope with the symbols defined in it.
*** THINK Backtracking:
- [ ] Triggered by backtrack expression. Extended syntax - ?.
*** THINK Error handling:
- [ ] ? error/catch functions.
** TODO Atomic types:
*** TEST Numbers:
- [X] Evaluate to themselves.
*** TEST Symbols:
- [X] Evaluate to their bound expression.
*** TODO Strings:                                                     :THINK:
- [X] Immutable
- [X] Symbol:
    + [X] Evaluate to themselves unless forced to eval by embed
          expression.
    + [X] WYSIWYG meaning they can contain whitespaces and syntax tokens.
- [ ] Collection:
    + [ ] ? Consist of one letter symbols - characters.
    + [ ] ? Consist of numerical representations of the characters.
    + [ ] ? Consist of one letter strings.
- [ ] ? Special regex literal - /some regex/
- [ ] ! Recognise escape sequences. E.g. "\n" etc
- [ ] Used for documentation.
- [ ] ! Rocagnise expression expansion "$(* 2 2) != 2" -> "4 != 2"
** TODO Callable types:
*** TODO Functions:                                                   :THINK:
- [X] First-class objects.
- [ ] Pure functions:
    + [ ] Can call only other pure functions.
    + [ ] ? Receive pure+syntax subset of a Scope.
    + [ ] Parallel higher order functions (like map, reduce etc) for
          pure functions.
- [X] Anonymous function creation - (function (argslist) body)
- [X] Closures.
- [ ] ? Keywords:
    + [ ] ! .lazy - toggles lazy evaluation.
    + [ ] ! .optional - makes an argument optional.
*** TODO Macros:                                                      :THINK:
- [ ] First class objects.
- [X] Evaluated before regular evaluation.
- [X] Create new syntax keywords.
- [X] Easly defined with a clean form - (macro name (argslist) body)
- [ ] ? Keywords:
    + [ ] ! .optional - makes an argument optional.
*** TODO Scopes:
- [X] First-class objects.
- [X] Allow binding symbols to other objects.
- [ ] Allow merging with other Scopes.
- [ ] ! Allow to be imported into other scopes. ? E.g. their outter Scope
      becomes the one they are imported to.
** TODO Collection types:
*** TEST Tuples:
- [X] Immutable
- [X] Call the first Callable object in them with the rest of the
      tuple as the call arguments upon their evaluation.
*** TODO List:                                                        :THINK:
- [ ] ! Evaluate to an anonymous function built from the list.
- [ ] ? Callable with a comparator used to sort the list.
*** TODO Sets:                                                        :THINK:
- [X] Evaluate all the expressions they contain in the source file
      order, returning the last one.
- [ ] ? Callable with a predicate/relation, returns subset satisfying
      the predicate/relation.
- [ ] ? Callable with a comparator used to sort the set.
* THINK THINGS TO IMPLEMENT IN THE LIBRARY:
** THINK ASMKit
- [ ] ! Contains a minimal set of builtin, precompiled functions needed
      to implement the language.
- [ ] ! Uses parallel evaluation where possible.
*** THINK Functions:
Actually list them here.
** THINK Modules:
- [ ] ? core - containing builtins and a few usefull functions.
- [ ] ! io - containing I/O routines.
- [ ] ! math - containing math routines (probably compilled into the
      interpreter).
** THINK Type predicates:
- [ ] ? Evaluate to fnord on false, to their arg otherwise.
- [ ] ? Accept a single argument.
*** THINK Functions & return values:
- [ ] fnord? - 'yup if an expression is fnord.
- [ ] symbol? - symbol if an expression is a symbol.
- [ ] number? - number if an expression is a number.
- [ ] string? - string if an expression is a string.
- [ ] scope? - scope if an expression is a scope.
- [ ] function? - function if an expression is a function.
- [ ] pure? - pure if an expression is a pure function.
- [ ] syntax? - syntax if an expression is a syntax keyword.
- [ ] ? type? - NOT A PREDICATE, returns type tuple of an object.
** THINK Type conversions:
- [ ] ! Convert in place if passed a settable reference, or create a copy.
- [ ] ? Return fnord on error.
*** THINK Functions & return values:
- [ ] number->string - string representation of a number.
- [ ] string->number - numerical value of a string.
- [ ] ? symbol->string - same thing with Syntax.StringDelim all over.
- [ ] ? string->symbol - symbol representation of the string
      (if conversible).
- [ ] list->tuple - makes an immutable version of a list.
- [ ] set->tuple - makes an immutable version of a set.
- [ ] ? tuple->list - makes a mutable _COPY_ of a tuple
- [ ] ! tupleof - makes an immutable version of a passed arg (should
      work for atoms aswell).
- [ ] ! stringof - makes a string representation of a passed arg.
- ? etc
** THINK Working with numbers:
- [ ] ASMKit functions accept two arguments.
- [ ] ! Generic functions built ontop of ASMKit ones, directly in ASM.
      Return (reduce ASMKitFunc args).
*** THINK ASMKit:
- [ ] mult - a * b
- [ ] add - a + b
- [ ] sub - a - b
- [ ] div - a / b
- [ ] mod - a modulo b
*** THINK Generics:
- [ ] + - generic add
- [ ] - - generic sub
- [ ] * - generic mult
- [ ] / - generic div
- [ ] modulo - generic mod
- [ ] ? etc
** THINK Equality checks:
- [ ] ASMKit versions taking only two args.
- [ ] Generic versions returning first arg on true.
*** THINK ASMKit:
- [ ] eq? - polimorfic equality check.
- [ ] leq? - a <= b
- ? etc
*** THINK Generics:
- [ ] ? equal?/=/== - generic equal?
- [ ] <= - generic leq?
- [ ] >= - generic ((a eq? b) or (not (a leq? b)))
- [ ] < - generic ((not (a eq? b)) and (a leq? b))
- [ ] > - generic ((not (a eq? b)) and (not (a leq? b)))
** THINK Working with collections:
- [ ] Working for all the collection types.
*** THINK Functions:
**** THINK Collection manipulation:
- [ ] ? join - joins two collections into one. Also joins a single
      element and a collection to form a new collection.
- [ ] ! first - returns a reference to the first element of a mutable
      collection, or its value if collection is immutable.
- [ ] ! rest - returns a new collection referencing the rest part of
      the old one.
- [ ] ? second, third, fourth etc.
**** THINK Collection creation:
- [ ] ? list - returns a list consisting of the call args.
- [ ] ? tuple - returns a tuple consisting of the call args.
- [ ] ? set - returns a set consisting of the call args.
** THINK Input:
- [ ] Unformatted (string) reads.
- [ ] Formatted reads (reads into the passed args).
- [ ] ? Use this for files, sockets, stdin etc.
*** THINK Functions:
- [ ] ? load/open - Loads a file for reading (as a Scope with read
      defined acordingly).
- [ ] ! read - performing both formatted and unformatted reads
      (depending on args).
- [ ] ? read-char - reads a single character.
- [ ] ? peek-char - peeks a single character.
- [ ] ? close - closes a file.
- [ ] eof? - returns 'yup/the object if it has reached EOF.
- ? etc
** THINK Output:
- [ ] ? Functions paired with input ones.
*** THINK Functions:
- [ ] write - performs formatted output.
- [ ] ? error - throws an error caugth by the REPL.
- [ ] ? warning - adds a warning printed by the REPL.
- ? etc
* TODO THINGS TO IMPLEMENT IN THE INTERPRETER:
** TODO Lexical:
*** TODO Formal grammar description:
- [ ] Finish NumberLiteral formal description / split it into several
      numerical values.
- [ ] Finish Symbol formal description.
- [ ] Add escape sequences and embeds to the String formal
      description.
*** TODO Syntax:                                                      :THINK:
- [ ] ? Change Syntax to enum Syntax : string {}.
*** TODO Keywords:                                                    :THINK:
- [ ] Sort out which keywords are crucial and leave only those.
- [ ] Sort the list and write proper descriptions.
- [ ] ? Self:
    + ? Used only for representation of Collections/Scopes/Functions.
    + ? Used semanticly as a self reference of an object.
- [ ] Rename Embed to something more appropriate.
** TODO AST:                                                          :THINK:
- [ ] ? Type primitive used for semantic analyzis.
*** TODO Type:                                                        :THINK:
- [ ] ? Namechange to Types.
- [ ] Types should already have the correct values, for easier
      use later. E.g. Type.String = Type.Immutable|Type.Symbol|Type.Atom;
*** THINK Semantic analyzis:                                      :IMPORTANT:
- [ ] version(safe) toggling semantic analyzis.
- [ ] Type checking, and predictedType field in Expression.
- [ ] Arg number and type checking in Callables.
    + [ ] AbigiousCall error when types can vary greatly. E.g. Many
          ifs returning many different expressions.
- [ ] Arg evaluation list building using thunks.
- [ ] Recursion depth checking.
- [ ] ? Macro expansion.
*** TODO Expression:                                                  :THINK:
- [ ] ? Doc string and additional helpful fields.
- [ ] ? opApply instead of call(), for convinience.
- [ ] T value(T)() instead of real value().
*** TODO Atom:                                                        :THINK:
- [ ] Take the string away from there, Make it a proper immutable
      collection.
- [ ] Add more numerical types.
- [ ] ? Add common atomic operations (like math for numbers, etc).
*** TODO Collection:
- [ ] call() for Set and List with no implementation for Tuple.
- [ ] List evaluating to an anonymous function.
- [ ] No arg evaluation before the call in Tuple.eval().
- [ ] Set returning FNORD for an empty set evaluation.
*** TODO Callable:                                                    :THINK:
- [ ] Depth parameter for the calls.
- [ ] ? String representation actually showing the callable.
*** TODO Scope:                                                       :THINK:
- [ ] ? String representation actually being usefull. (A tuple of
      keys, perhaps.)
- [ ] One lexical scope of the variables, instead of symbol and syntax
      distinction.
- [ ] Fix define().
- [X] Remove set().
- [ ] ? Add merge(Scope).
- [ ] ? Add import(Scope).
- [X] Scope call returning references.
** TODO Parser:                                                       :THINK:
- [ ] Fix number parsing and PhobosBug(TM) workarrounds.
- [ ] ? NumberParser
*** TODO StringParser:
- [ ] Actually parsing strings.
- [ ] Recognize escape sequences.
- [ ] Recognize expression embeds.
*** TODO Unittests:                                         :IMPORTANT:THINK:
- [ ] More preprocess() unittests.
- [ ] More tokenize() unittests.
- [ ] ? parse() unittests.
** TODO Interpreter:                                                  :THINK:
- [ ] ? Fix FNORD comparisions. (Move it to ASM.lexical?)
- [ ] Actually write some fooking implementations. (Create a separate
      file for these?)
- [ ] Fix doString() and doFile().
- [ ] ? InterpretingError
*** TODO Implementations:
- [ ] Fix Embed, Quote and Quasiquote on strings.
- [ ] Find solution to/report ref parameter delegate bug in Function.
- [ ] Keyword dispatch for Callables declarators.
