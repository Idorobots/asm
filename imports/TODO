################################################################################
#+TITLE: ASM Standard Library TODO file
# Each category will be a single module.
#
# ? - think/rethink/reimplement
# ! - important
#
#+STARTUP: content
#+SEQ_TODO: NEXT STARTED TEST FIXME DONE
#
# nothing - plannig and designing.
# NEXT - scheduled for implementation.
# STARTED - proper implementation phase.
# TEST - testing phase.
# FIXME - scheduled for bugfixing, unbreaking, etc.
# DONE - sweet, sweet nothing.
####################

* Babel
# A module making ASM look and feel like other languages.
- cc.babel
** Lispy
** Pythony
** Algoly
** etc
* Collections
- [X] Generic for all the collection types.
- cc.collections
*** Collection manipulation
- [-] join - if the second argument is a collection - prepends it the
      the first argument, if it's not a collection - joins both
      arguments into a pair. Creates a new collection.
      Examples:
      + (join 1 '[1 2 3]) -> [1 1 2 3]
      + (join '(a b) '[1 2 3]) -> [(a b) 1 2 3]
      + (join 'a 'b) -> (a b)
- [-] append  if argument types match - appends element or a
      collection to another collection, if types don't match - appends
      the second argument to the collection.
      Creates a new collection.
      Examples:
      + (append '[1 2 3] 4) -> [1 2 3 4]
      + (append '[1 2 3] '[4 5 6]) -> [1 2 3 4 5 6]
      + (append '(2 3) '[2 3]) -> (2 3 [2 3])
- [X] first - returns a reference to the first element of a mutable
      collection, or its value for an immutable collection.
- [X] rest - returns a new collection referencing the rest part of
      the old one.
- [X] second, third, fourth etc.
- [X] nth - returns nth element of a collection.
- [X] map - maps an operation to a collection collecting results.
- [X] reduce - maps an operation to a collection reducing it to a
      single value.
- [ ] ? slice - slices a collection creating subcollection.
- [-] ? push, push-back, pop, pop-back.
- ? etc
*** Collection creation
- [X] list - returns a list consisting of the call args.
- [X] tuple - returns a tuple consisting of the call args.
- [X] set - returns a set consisting of the call args.
- [X] scope - reuturns a scope with call args defined in it.
- ? etc.
* Core
- core
*** Type predicates
- [ ] ? Accept multiple args.
- [X] Evaluate to fnord on false, to one of their args otherwise.

- [X] type? - NOT A PREDICATE, returns type tuple of a _single_
      object.
- [X] fnord? - 'yup if an expression is fnord.
- [X] symbol? - symbol if an expression is a symbol.
- [X] number? - number if an expression is a number.
- [X] string? - string if an expression is a string.
- [X] scope? - scope if an expression is a scope.
- [X] function? - function if an expression is a function.
- [X] pure? - pure if an expression is a pure function.
- [X] syntax? - syntax if an expression is a syntax keyword.
- [X] scope? - scope if an expression is repetition, sigh.
- [X] builtin? - builtin if an expression is a builtin.
- [X] immutable? - immutable if an expression is immutable.
- [ ] mutable? - mutable if an expression is not immutable.
*** Type conversions
- [ ] ! Convert in place if passed a settable reference, or create a copy.
- [ ] ? Return fnord on error.

- [ ] ? string->number - numerical value of a string.
- [ ] ? string->symbol - returns a symbol version of a string.
      (both deprecated because of the (read-from-string))
- [-] tupleof:
        + [X] Makes an immutable tuple version of a passed arg.
        + [ ] ? Should work for atoms aswell.
- [-] listof:
        + [X] Makes a list representation of an arg.
        + [ ] ? Should work for atoms too.
- [-] setof:
        + [X] Makes a set representation of an arg.
        + [ ] ? Should work for atoms too.
- [X] ! stringof - Makes a string representation of a passed arg.
- ? etc
*** Working with numbers
- [ ] ASMKit functions accept two arguments.
- [ ] ! Generic functions built ontop of ASMKit ones, directly in ASM.
      Return (reduce ASMKitFunc args).
- [ ] ? Do not use the common operators, so they become redefineable.
**** NEXT ASMKit:
- [ ] * - a * b
- [ ] + - a + b
- [ ] - - a - b
- [ ] / - a / b
- [ ] mod - a modulo b
**** NEXT Generics:
- [ ] sum - generic +
- [ ] mult - generic *
- [ ] sub - generic -
- [ ] div - generic /
- [ ] modulo - generic mod
- ? etc
*** Equality checks
- [ ] ASMKit versions taking only two args.
- [ ] Generic versions returning first arg on true.
**** NEXT ASMKit:
- [ ] eq? - polimorfic equality check.
- [ ] leq? - a <= b
- ? etc
**** NEXT Generics:
- [ ] ? equal?/=/== - generic equal?
- [ ] <= - generic leq?
- [ ] >= - generic ((a eq? b) or (not (a leq? b)))
- [ ] < - generic ((not (a eq? b)) and (a leq? b))
- [ ] > - generic ((not (a eq? b)) and (not (a leq? b)))
* IO
- cc.io
- [ ] ? Using one interface for files, sockets, stdin etc.
*** Input
- [ ] readln - Unformatted (string) reads.
- [ ] read - Formatted reads.
- [ ] ? load/open - Loads a file for reading (as a Scope/Stream with read
      defined acordingly).
- [ ] ? close - closes an imput stream.
- [ ] eof? - returns 'yup/the object if it has reached EOF.
- ? etc
*** Output
- [X] write - writes string representation of the args.
- ? etc
* Error
- core.error
# Merge with Core?
- [ ] ? error! - throws an error caugth by the REPL.
- [ ] ? warning! - prints a warning/throws an error if 'serious
      bussiness' was enabled..
- [-] ? catch - catches a thrown error. (Name `handle-error'?)
- [ ] ? assert! - checks a condition and throws an error on failure.
- ? etc
* GC
- core.gc
# Merge with core?
- [ ] collect! - does a collection.
- [ ] minimise! - minimises memory use.
- [ ] stop! - stops GC.
- [ ] resume! - resumes GCs work.
* Math
- cc.math
- ? Precompiled.
- [ ] sqrt
- [ ] pow
- [ ] exp
- [ ] min/max/clamp
- ? etc
* Parser
# Merge with core?
- [ ] syntax! - defines a new reader syntax macro.
- [ ] lex - lexes an input string.
- [ ] ? parse - parses an input string. (Name read-from-string).
