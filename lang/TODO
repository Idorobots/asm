################################################################################
# ASM Language Specyfication TODO
#
# ? - think/rethink/reimplement
# ! - important
#
#+SEQ_TODO:TODO TEST TWEAK DONE
#
# TODO - planing and prototyping.
# TEST - testing phase, decides if the feature stays or goes. Also, implementation.
# TWEAK - tweaking, fixing stuff to work with the newer features.
# DONE - the feature is stable and will probably stay forever in the language.
####################

* TODO THINGS CONCERNING THIS FILE:
- Move implementation specific stuff back to Interpreter TODO.
- Add all the needed lang spec stuff.

################################################################################

* TODO Lexical:
** TEST Comments:
- [X] Line comments starting with "##" or "# ". E.g. # line comment\n
- [X] Expression comments - analyzed syntacticly, used for debugging and
      documenting purposes. E.g. #(sexp comment), #sexp_comment
** TODO String literals:
- ?
** TODO Number literals:
- ?
** TODO Symbols:
- ?

################################################################################

* TODO Semantic metadata:
** TODO Keywords:
- [X] ? Dot prefixed.
- [X] Stick to other objects.
- [ ] ? Propagate through the AST.

################################################################################

* TODO Language quirks:
** TEST Booleans:
- [X] Only one logical false, anything else is considered true -
      () = fnord = '() - 0-Tuple
** TEST Quoting & embedding:
- [X] Quote - returns the argument untouched. Extended syntax - '.
- [X] Quasiquote - returns the argument with embedded
      expressions. Extended syntax - `.
- [X] Embed - embeds an expression in quasiquote and strings,
      evaluates strings, binds variables in pattern matching.
      Extended syntax - $.
** TODO Pattern matching:
- [ ] (matches? pattern arg)
- [ ] Binds embedded/backtracked symbols from pattern to the actual objects,
      returns a Scope with the symbols defined in it.
** TODO Backtracking:
- [ ] ? Triggered by backtrack expression. Extended syntax - ?.
** TODO Error handling:
- [ ] UnitType
- [ ] ? error/catch functions.

################################################################################

* TODO Atomic types:
** TEST Numbers:
- [X] Evaluate to themselves.
** TEST Symbols:                                                      :THINK:
- [X] Evaluate to their bound expression.
- [ ] ? Pass their keywords to their bound expression.

################################################################################

* TODO Collection types:
** TODO Strings:                                                      :THINK:
- [X] Immutable
- [X] Symbol:
    + [X] Evaluate to themselves unless forced to eval by embed
          expression.
    + [X] WYSIWYG meaning they can contain whitespaces and syntax tokens.
- [-] Collection:
    + [ ] Consist of one letter symbols - characters.
    + [ ] ? Consist of numerical representations of the characters.
    + [X] ? Consist of one letter strings.
- [ ] ? Special regex literal - /some regex/:
    + [ ] Creates a special, callable regex string with common regex
          operations defined. E.g. split, join, replace etc.
    + [ ] ? Sed-like regexes. E.g. s/from/to/g
- [ ] ! Recognise escape sequences. E.g. "\n" etc
- [ ] ! String expansion "$(* 2 2) != 2" -> "4 != 2"
** TEST Tuples:
- [X] Immutable
- [X] Call the first Callable object in them with the rest of the
      tuple as the call arguments upon their evaluation. (by default)
** TEST List:
- [X] Evaluate to an anonymous function built from the list. (by
      default)
- [X] Evaluate to "__listeval" function with the elements passed as
      the arguments.
- [X] Callable with an index, return a reference to that element. (by
      default)
- [X] Call "__listcall" function when called passing call arguments
      and themselves as its arguments.
** TEST Sets:
- [X] Evaluate all the expressions they contain in the source file
      order, returning the last one. (by default)
- [X] Evaluate to "__seteval" function with the elements passed as
      the arguments.
- [X] Callable with multiple predicates, returns subset satisfying
      the predicates. (by default)
- [X] Call "__setcall" function when called passing call arguments
      and themselves as its arguments.
** TODO HashTables:
- ?
** TODO Scopes:
- [X] First-class objects.
- [X] Allow binding symbols to other objects.
- [ ] ! Allow imorting symbols from their scope to other scopes.

################################################################################

* TODO Callable types:
** TODO Functions:                                                    :THINK:
- [X] First-class objects.
- [ ] Pure functions:
    + [ ] Can call only other pure functions.
    + [ ] ? Receive pure+syntax subset of a Scope.
    + [ ] Parallel higher order functions (like map, reduce etc) for
          pure functions.
- [X] Anonymous by default.
- [X] Closures.
- [ ] ? Use "__argDispatcher" function for argument dispatching.
- [ ] Arglist keywords:
    + [ ] ! .ref - passed by reference.
    + [ ] ! .in - passed by reference, but const.
    + [ ] ! .out - passed by reference, but it to fnord.
    + [ ] ! .lazy - toggles lazy evaluation.
    + [ ] ! .optional - makes an argument optional.
    + [ ] !? ... - stores any additional call parameters in a
          collection.
** TODO Macros:                                                       :THINK:
- [X] First class objects.
- [X] Evaluated before regular evaluation.
- [X] Create new syntax keywords.
- [X] Named by default.
- [ ] ? Use "__argDispatcher" function for argument dispatching.
- [ ] ? Arglist keywords:
    + [ ] ! .optional - makes an argument optional.
    + [ ] !? ... - stores any additional call parameters in a
          collection.

################################################################################

* TODO RANDOM IDEAS:
** Strings:
- [ ] Usable only with atomic types.
- [ ] Packed tightly internally.
- [ ] ? Abstract 'string collection' out of the string:
      + |s t r \0| - character string. (Same as "str\0".)
      + |0 3 1 2 3| - number string.
- [ ] ? Expression embedding:
      + | 1 2 $(+ 1 2) 3 |
      + "foo $bar"
** UnitType:
- [X] O-Tuple as the UnitType.
- [X] fnord as an alias of ().
- [X] () == false, rest == true.
** Flow control:
- [ ] (cond (c1 b1)
            (c2 b2)
            ...)
- [ ] (match e
             (p1 b1)
             (p2 b2)
             ...)
- [ ] (try e
           (h1 b1)
           (h2 b2)
           ...)

################################################################################
